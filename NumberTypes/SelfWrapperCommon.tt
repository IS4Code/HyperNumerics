<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using IS4.HyperNumerics.Operations;
using System;
using System.Collections;
using System.Collections.Generic;

namespace IS4.HyperNumerics.NumberTypes
{
<#
Func<string, string> emptyConstraints = fn => "";
var data = new[] {
	new{name = "AbstractNumber", args = "", hasinner = false, hasprimitive = false, constraints = emptyConstraints},
	new{name = "PrimitiveAbstractNumber", args = "", hasinner = false, hasprimitive = false, constraints = emptyConstraints},
	new{name = "UnaryAbstractNumber", args = "", hasinner = false, hasprimitive = false, constraints = emptyConstraints},
	new{name = "PrimitiveUnaryAbstractNumber", args = "", hasinner = false, hasprimitive = false, constraints = emptyConstraints},
	new{name = "BinaryAbstractNumber", args = "", hasinner = false, hasprimitive = false, constraints = emptyConstraints},
	new{name = "PrimitiveBinaryAbstractNumber", args = "", hasinner = false, hasprimitive = false, constraints = emptyConstraints},
	new{name = "BoxedNumber", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
	new{name = "CustomDefaultNumber", args = "TTraits", hasinner = true, hasprimitive = true, constraints = (Func<string, string>)(fn => " where TTraits : struct, " + fn + ".ITraits")},
	new{name = "GeneratedNumber", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
	new{name = "HyperComplex", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
	new{name = "HyperDiagonal", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
	new{name = "HyperDual", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
	new{name = "HyperSplitComplex", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
	new{name = "NullableNumber", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
	new{name = "NullNumber", args = "", hasinner = false, hasprimitive = true, constraints = emptyConstraints},
	new{name = "ProjectiveNumber", args = "", hasinner = true, hasprimitive = true, constraints = emptyConstraints},
};
foreach(var info in data)
{
	bool hasinner = info.hasinner;
	for(int variant = 0; variant <= (info.hasprimitive ? 1 : 0); variant++)
	{
		bool primitive = variant == 1;
		string primitiveaffix = primitive ? ", TPrimitive" : "";
		string fullname = info.name;
		bool first = true;
		if(hasinner)
		{
			fullname += "<TInner";
			first = false;
		}
		if(primitive)
		{
			fullname += first ? "<" : ", ";
			fullname += "TPrimitive";
			first = false;
		}
		if(!String.IsNullOrEmpty(info.args))
		{
			fullname += first ? "<" : ", ";
			fullname += info.args;
			first = false;
		}
		if(!first)
		{
			fullname += ">";
		}
#>
	partial struct <#=fullname#> : IWrapperNumber<<#=fullname#>, <#=fullname#><#=primitiveaffix#>>, IWrapperNumber<<#=fullname#>, <#=fullname#>, <#=fullname#>><#=
	hasinner ? primitive ? " where TInner : struct, INumber<TInner, TPrimitive>" : " where TInner : struct, INumber<TInner>" : ""
	#><#=
	primitive ? " where TPrimitive : struct, IEquatable<TPrimitive>, IComparable<TPrimitive>" : ""
	#><#=
	info.constraints(fullname)
	#>
	{
        <#=fullname#> IWrapperNumber<<#=fullname#>>.Value => this;

		<#=fullname#> IExtendedNumber<<#=fullname#>, <#=fullname#>>.CallReversed(BinaryOperation operation, in <#=fullname#> num)
		{
			return num.Call(operation, this);
		}

		<#=fullname#> INumber<<#=fullname#>, <#=fullname#>>.CallComponent(UnaryOperation operation)
		{
			return Call(operation);
		}
		
        IExtendedNumberOperations<<#=fullname#>, <#=fullname#>> IExtendedNumber<<#=fullname#>, <#=fullname#>>.GetOperations()
        {
            return Operations.Instance;
        }<# if(primitive) { #>


		IExtendedNumberOperations<<#=fullname#>, <#=fullname#>, TPrimitive> IExtendedNumber<<#=fullname#>, <#=fullname#>, TPrimitive>.GetOperations()
        {
            return Operations.Instance;
        }<# } #>
		

		INumberOperations<<#=fullname#>, <#=fullname#>> INumber<<#=fullname#>, <#=fullname#>>.GetOperations()
        {
            return Operations.Instance;
        }

		IExtendedNumberOperations<<#=fullname#>, <#=fullname#>, <#=fullname#>> IExtendedNumber<<#=fullname#>, <#=fullname#>, <#=fullname#>>.GetOperations()
        {
            return Operations.Instance;
        }

		partial class Operations : IExtendedNumberOperations<<#=fullname#>, <#=fullname#><#=primitiveaffix#>>, IExtendedNumberOperations<<#=fullname#>, <#=fullname#>, <#=fullname#>>
		{
            <#=fullname#> INumberOperations<<#=fullname#>, <#=fullname#>>.CallComponent(UnaryOperation operation, in <#=fullname#> num)
            {
                return num.Call(operation);
            }

            public <#=fullname#> Create(in <#=fullname#> num)
            {
                return num;
            }

            public <#=fullname#> Create(in <#=fullname#> realUnit, in <#=fullname#> otherUnits, in <#=fullname#> someUnitsCombined, in <#=fullname#> allUnitsCombined)
            {
                return realUnit;
            }

            public <#=fullname#> Create(IEnumerable<<#=fullname#>> units)
            {
                var ienum = units.GetEnumerator();
                ienum.MoveNext();
                return ienum.Current;
            }

            public <#=fullname#> Create(IEnumerator<<#=fullname#>> units)
            {
                var value = units.Current;
                units.MoveNext();
                return value;
            }
		}
		
        int ICollection<<#=fullname#>>.Count => 1;

        bool ICollection<<#=fullname#>>.IsReadOnly => true;

        int IReadOnlyCollection<<#=fullname#>>.Count => 1;

        <#=fullname#> IReadOnlyList<<#=fullname#>>.this[int index] => index == 0 ? this : throw new ArgumentOutOfRangeException(nameof(index));

        <#=fullname#> IList<<#=fullname#>>.this[int index]
        {
            get{
                return index == 0 ? this : throw new ArgumentOutOfRangeException(nameof(index));
            }
            set{
                throw new NotSupportedException();
            }
        }

        int IList<<#=fullname#>>.IndexOf(<#=fullname#> item)
        {
            return Equals(item) ? 0 : -1;
        }

        void IList<<#=fullname#>>.Insert(int index, <#=fullname#> item)
        {
            throw new NotSupportedException();
        }

        void IList<<#=fullname#>>.RemoveAt(int index)
        {
            throw new NotSupportedException();
        }

        void ICollection<<#=fullname#>>.Add(<#=fullname#> item)
        {
            throw new NotSupportedException();
        }

        void ICollection<<#=fullname#>>.Clear()
        {
            throw new NotSupportedException();
        }

        bool ICollection<<#=fullname#>>.Contains(<#=fullname#> item)
        {
            return Equals(item);
        }

        void ICollection<<#=fullname#>>.CopyTo(<#=fullname#>[] array, int arrayIndex)
        {
            array[arrayIndex] = this;
        }

        bool ICollection<<#=fullname#>>.Remove(<#=fullname#> item)
        {
            throw new NotSupportedException();
        }

        IEnumerator<<#=fullname#>> IEnumerable<<#=fullname#>>.GetEnumerator()
        {
            yield return this;
        }
	}

<#
	}
}
#>
}