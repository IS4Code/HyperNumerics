<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using IS4.HyperNumerics.Operations;
using IS4.HyperNumerics.Utils;
using System;
using System.Collections;
using System.Collections.Generic;

namespace IS4.HyperNumerics.NumberTypes
{
<#
Func<string, string> emptyConstraints = fn => "";
var data = new[] {
	new{name = "AbstractNumber", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
	new{name = "ComponentAbstractNumber", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
	new{name = "UnaryAbstractNumber", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
	new{name = "ComponentUnaryAbstractNumber", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
	new{name = "BinaryAbstractNumber", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
	new{name = "ComponentBinaryAbstractNumber", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
	new{name = "BoxedNumber", args = "", level = 3, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "CustomDefaultNumber", args = "TProvider", level = 3, componenttype = "TComponent", constraints = (Func<string, string>)(fn => " where TProvider : struct, " + fn + ".IDefaultValueProvider")},
	new{name = "GeneratedNumber", args = "", level = 1, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "HyperComplex", args = "", level = 2, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "HyperDiagonal", args = "", level = 2, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "HyperDual", args = "", level = 2, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "HyperSplitComplex", args = "", level = 2, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "NullableNumber", args = "", level = 2, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "NullNumber", args = "", level = 0, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "ProjectiveNumber", args = "", level = 2, componenttype = "TComponent", constraints = emptyConstraints},
	new{name = "Real", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
	new{name = "ExtendedReal", args = "", level = 0, componenttype = "", constraints = emptyConstraints},
};
foreach(var info in data)
{
	var level = info.level;
	var componenttype = info.componenttype;
	bool hascomponent = componenttype == "TComponent";
	for(int variant = 0; variant <= (hascomponent ? 1 : 0); variant++)
	{
		bool component = variant == 1 || (info.componenttype != "" && !hascomponent);
		string componentaffix = component && hascomponent ? ", TComponent" : "";
		string fullname = info.name;
		bool first = true;
		if(level >= 1)
		{
			fullname += "<TInner";
			first = false;
		}
		if(component && hascomponent)
		{
			fullname += first ? "<" : ", ";
			fullname += "TComponent";
			first = false;
		}
		if(!String.IsNullOrEmpty(info.args))
		{
			fullname += first ? "<" : ", ";
			fullname += info.args;
			first = false;
		}
		if(!first)
		{
			fullname += ">";
		}
#>
	partial struct <#=fullname#><#=
	level >= 2 ? " : IReadOnlyRefEquatable<TInner>, IReadOnlyRefComparable<TInner>" : ""
	#><#=
	level >= 1 ? component ? " where TInner : struct, INumber<TInner, TComponent>" : " where TInner : struct, INumber<TInner>" : ""
	#><#=
	component && hascomponent ? " where TComponent : struct, IEquatable<TComponent>, IComparable<TComponent>" : ""
	#><#=
	info.constraints(fullname)
	#>
	{
        object ICloneable.Clone()
        {
            return Clone();
        }

        public <#=fullname#> CallReversed(BinaryOperation operation, in <#=fullname#> other)
        {
            return other.Call(operation, this);
        }

        bool IEquatable<<#=fullname#>>.Equals(<#=fullname#> other)
        {
            return Equals(other);
        }

        int IComparable<<#=fullname#>>.CompareTo(<#=fullname#> other)
        {
            return CompareTo(other);
        }<# if(level >= 2) { #>


        bool IEquatable<TInner>.Equals(TInner other)
        {
            return Equals(other);
        }

        int IComparable<TInner>.CompareTo(TInner other)
        {
            return CompareTo(other);
        }

        public static implicit operator <#=fullname#>(TInner value)
        {
            return new <#=fullname#>(value);
        }
		
		private static TInner GetAsWrapper<T>(in T obj) where T : IWrapperNumber<TInner>
		{
			return obj.Value;
		}<# if(level >= 3) { #>


		public static implicit operator TInner(<#=fullname#> value)
        {
            return GetAsWrapper(value);
        }<# }else{ #>


		public static explicit operator TInner(<#=fullname#> value)
        {
            return GetAsWrapper(value);
        }<# } #><# } #>


        public static <#=fullname#> operator+(<#=fullname#> a, <#=fullname#> b)
        {
            return a.Call(BinaryOperation.Add, b);
        }
		
        public static <#=fullname#> operator-(<#=fullname#> a, <#=fullname#> b)
        {
            return a.Call(BinaryOperation.Subtract, b);
        }
		
        public static <#=fullname#> operator*(<#=fullname#> a, <#=fullname#> b)
        {
            return a.Call(BinaryOperation.Multiply, b);
        }
		
        public static <#=fullname#> operator/(<#=fullname#> a, <#=fullname#> b)
        {
            return a.Call(BinaryOperation.Divide, b);
        }
		
        public static <#=fullname#> operator^(<#=fullname#> a, <#=fullname#> b)
        {
            return a.Call(BinaryOperation.Power, b);
        }
		
        public static <#=fullname#> operator-(<#=fullname#> a)
        {
            return a.Call(UnaryOperation.Negate);
        }
		
        public static <#=fullname#> operator~(<#=fullname#> a)
        {
            return a.Call(UnaryOperation.Inverse);
        }
		
        public static <#=fullname#> operator++(<#=fullname#> a)
        {
            return a.Call(UnaryOperation.Increment);
        }
		
        public static <#=fullname#> operator--(<#=fullname#> a)
        {
            return a.Call(UnaryOperation.Decrement);
        }

        public static bool operator==(<#=fullname#> a, <#=fullname#> b)
        {
            return a.Equals(b);
        }

        public static bool operator!=(<#=fullname#> a, <#=fullname#> b)
        {
            return !a.Equals(b);
        }

        public static bool operator>(<#=fullname#> a, <#=fullname#> b)
        {
            return a.CompareTo(b) > 0;
        }

        public static bool operator<(<#=fullname#> a, <#=fullname#> b)
        {
            return a.CompareTo(b) < 0;
        }

        public static bool operator>=(<#=fullname#> a, <#=fullname#> b)
        {
            return a.CompareTo(b) >= 0;
        }

        public static bool operator<=(<#=fullname#> a, <#=fullname#> b)
        {
            return a.CompareTo(b) <= 0;
        }<# if(level >= 1) { #>
		

        public static <#=fullname#> operator+(<#=fullname#> a, TInner b)
        {
            return a.Call(BinaryOperation.Add, b);
        }
		
        public static <#=fullname#> operator-(<#=fullname#> a, TInner b)
        {
            return a.Call(BinaryOperation.Subtract, b);
        }
		
        public static <#=fullname#> operator*(<#=fullname#> a, TInner b)
        {
            return a.Call(BinaryOperation.Multiply, b);
        }
		
        public static <#=fullname#> operator/(<#=fullname#> a, TInner b)
        {
            return a.Call(BinaryOperation.Divide, b);
        }
		
        public static <#=fullname#> operator^(<#=fullname#> a, TInner b)
        {
            return a.Call(BinaryOperation.Power, b);
        }

        public static <#=fullname#> operator+(TInner a, <#=fullname#> b)
        {
            return b.CallReversed(BinaryOperation.Add, a);
        }
		
        public static <#=fullname#> operator-(TInner a, <#=fullname#> b)
        {
            return b.CallReversed(BinaryOperation.Subtract, a);
        }
		
        public static <#=fullname#> operator*(TInner a, <#=fullname#> b)
        {
            return b.CallReversed(BinaryOperation.Multiply, a);
        }
		
        public static <#=fullname#> operator/(TInner a, <#=fullname#> b)
        {
            return b.CallReversed(BinaryOperation.Divide, a);
        }
		
        public static <#=fullname#> operator^(TInner a, <#=fullname#> b)
        {
            return b.CallReversed(BinaryOperation.Power, a);
        }<# } #><# if(level >= 2) { #>
		

        public static bool operator==(<#=fullname#> a, TInner b)
        {
            return a.Equals(b);
        }

        public static bool operator!=(<#=fullname#> a, TInner b)
        {
            return !a.Equals(b);
        }

        public static bool operator>(<#=fullname#> a, TInner b)
        {
            return a.CompareTo(b) > 0;
        }

        public static bool operator<(<#=fullname#> a, TInner b)
        {
            return a.CompareTo(b) < 0;
        }

        public static bool operator>=(<#=fullname#> a, TInner b)
        {
            return a.CompareTo(b) >= 0;
        }

        public static bool operator<=(<#=fullname#> a, TInner b)
        {
            return a.CompareTo(b) <= 0;
        }

        public static bool operator==(TInner a, <#=fullname#> b)
        {
            return b.Equals(a);
        }

        public static bool operator!=(TInner a, <#=fullname#> b)
        {
            return !b.Equals(a);
        }

        public static bool operator>(TInner a, <#=fullname#> b)
        {
            return b.CompareTo(a) < 0;
        }

        public static bool operator<(TInner a, <#=fullname#> b)
        {
            return b.CompareTo(a) > 0;
        }

        public static bool operator>=(TInner a, <#=fullname#> b)
        {
            return b.CompareTo(a) <= 0;
        }

        public static bool operator<=(TInner a, <#=fullname#> b)
        {
            return b.CompareTo(a) >= 0;
        }<# } #>


        INumberOperations INumber.GetOperations()
        {
            return Operations.Instance;
        }

        INumberOperations<<#=fullname#>> INumber<<#=fullname#>>.GetOperations()
        {
            return Operations.Instance;
        }<# if(component) { #>
		

        INumberOperations<<#=fullname#>, <#=componenttype#>> INumber<<#=fullname#>, <#=componenttype#>>.GetOperations()
        {
            return Operations.Instance;
        }<# } #><# if(level >= 1) { #>
		

        IExtendedNumberOperations<<#=fullname#>, TInner> IExtendedNumber<<#=fullname#>, TInner>.GetOperations()
        {
            return Operations.Instance;
        }<# if(component) { #>
		

        IExtendedNumberOperations<<#=fullname#>, TInner, <#=componenttype#>> IExtendedNumber<<#=fullname#>, TInner, TComponent>.GetOperations()
        {
            return Operations.Instance;
        }<# } #><# } #><# if(level >= 3) { #>

		
        INumberOperations<TInner> INumber<TInner>.GetOperations()
        {
            return HyperMath.Operations.For<TInner>.Instance;
        }<# if(component) { #>
		

        INumberOperations<TInner, <#=componenttype#>> INumber<TInner, <#=componenttype#>>.GetOperations()
        {
            return HyperMath.Operations.For<TInner, <#=componenttype#>>.Instance;
        }<# } #><# } #><# if(level >= 1 && !component) { #>


		INumberOperations<<#=fullname#>, TInner> INumber<<#=fullname#>, TInner>.GetOperations()
        {
            return Operations.Instance;
        }<# } #>


		partial class Operations
		{
			public static readonly Operations Instance = new Operations();
			
            public virtual bool IsInvertible(in <#=fullname#> num)
            {
                return num.IsInvertible;
            }

            public virtual bool IsFinite(in <#=fullname#> num)
            {
                return num.IsFinite;
            }

            public virtual <#=fullname#> Clone(in <#=fullname#> num)
            {
                return num.Clone();
            }

            public virtual bool Equals(<#=fullname#> num1, <#=fullname#> num2)
            {
                return num1.Equals(num2);
            }

            public virtual int Compare(<#=fullname#> num1, <#=fullname#> num2)
            {
                return num1.CompareTo(num2);
            }

            public virtual bool Equals(in <#=fullname#> num1, in <#=fullname#> num2)
            {
                return num1.Equals(num2);
            }

            public virtual int Compare(in <#=fullname#> num1, in <#=fullname#> num2)
            {
                return num1.CompareTo(num2);
            }

            public virtual int GetHashCode(<#=fullname#> num)
            {
                return num.GetHashCode();
            }

            public virtual int GetHashCode(in <#=fullname#> num)
            {
                return num.GetHashCode();
            }

            public virtual <#=fullname#> Call(UnaryOperation operation, in <#=fullname#> num)
            {
                return num.Call(operation);
            }

            public virtual <#=fullname#> Call(BinaryOperation operation, in <#=fullname#> num1, in <#=fullname#> num2)
            {
                return num1.Call(operation, num2);
            }<# if(level >= 1) { #>


            public virtual <#=fullname#> Call(BinaryOperation operation, in <#=fullname#> num1, in TInner num2)
            {
                return num1.Call(operation, num2);
            }

            public virtual <#=fullname#> Call(BinaryOperation operation, in TInner num1, in <#=fullname#> num2)
            {
                return num2.CallReversed(operation, num1);
            }<# } #><# if(component) { #>


            public virtual <#=componenttype#> CallComponent(UnaryOperation operation, in <#=fullname#> num)
            {
                return num.CallComponent(operation);
            }

            public virtual <#=fullname#> Call(BinaryOperation operation, in <#=fullname#> num1, in <#=componenttype#> num2)
            {
                return num1.Call(operation, num2);
            }

            public virtual <#=fullname#> Call(BinaryOperation operation, in <#=componenttype#> num1, in <#=fullname#> num2)
            {
                return num2.CallReversed(operation, num1);
            }<# }else if(level >= 1) { #>
			

			TInner INumberOperations<<#=fullname#>, TInner>.CallComponent(UnaryOperation operation, in <#=fullname#> num)
            {
                return num.CallComponent(operation);
            }<# } if(level >= 1) { #>


            public virtual <#=fullname#> Create(in TInner num)
            {
                return new <#=fullname#>(num);
            }<# } #>

		}<# if(level >= 1 && !component) { #>

		
        bool ICollection<TInner>.IsReadOnly => true;

        void IList<TInner>.Insert(int index, TInner item)
        {
            throw new NotSupportedException();
        }

        void IList<TInner>.RemoveAt(int index)
        {
            throw new NotSupportedException();
        }

        void ICollection<TInner>.Add(TInner item)
        {
            throw new NotSupportedException();
        }

        void ICollection<TInner>.Clear()
        {
            throw new NotSupportedException();
        }

        bool ICollection<TInner>.Remove(TInner item)
        {
            throw new NotSupportedException();
        }<# } #>

	}

<#
	}
}
#>
}